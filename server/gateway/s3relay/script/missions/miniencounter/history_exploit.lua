-- File Description
-- 符离冲突战理论功勋总数

-- Include Files
Include("\\script\\lib\\common.lua");
Include("\\script\\lib\\objbuffer_head.lua");

-- Global Data
tbMiniEncounterHistory		  = {};					   -- 符离冲突战
tbMiniEncounterHistory.SAVE_KEY = "BATTLE_MiniEncounter";
tbMiniEncounterHistory.DEBUG	= 0;
tbMiniEncounterHistory.tbData   = {};
tbMiniEncounterHistory.nCurExploitPerWeek = 2000;
------------------------------------------------------------------------------------
-- tbMiniEncounterHistory.tbData = { [1] = nCurWeek, [2] = nCurHistoryExploit };  --
------------------------------------------------------------------------------------
function tbMiniEncounterHistory:DebugPrint(s)
	if self.DEBUG ~= nil and self.DEBUG == 1 then
		print (s);
	end
end

function tbMiniEncounterHistory:SaveData()
	self:DebugPrint("tbMiniEncounterHistory:SaveData() was invoked.");
	self.tbData = self.tbData or {};

	-- If data not existed, do nothing
	if self.tbData == nil or getn(self.tbData) <= 0 then
		return nil;
	end

	local hObject = OB_Create();
	ObjBuffer:PushObject(hObject, self.tbData);
	OB_SaveShareData(hObject, self.SAVE_KEY, 0, 0);
	OB_Release(hObject);
end

function tbMiniEncounterHistory:LoadData()
	self:DebugPrint("tbMiniEncounterHistory:LoadData() was invoked.");
	self.tbData = self.tbData or {};

	-- If data existed, do nothing
	if self.tbData ~= nil and getn(self.tbData) > 0 then
		return nil;
	end

	-- read data from share data
	local hObject = OB_Create();
	OB_LoadShareData(hObject, self.SAVE_KEY, 0, 0);

	if OB_IsEmpty(hObject) ~= 1 then
		self.tbData = ObjBuffer:PopObject(hObject);
	end
	
	OB_Release(hObject);
	
	-- read error
	if self.tbData == nil or getn(self.tbData) <= 0 then
		self.tbData[1] = 0;
		self.tbData[2] = 0;
	end
	self:DebugPrint("> self.tbData[1] = "..self.tbData[1]);
	self:DebugPrint("> self.tbData[2] = "..self.tbData[2]);
end

function tbMiniEncounterHistory:QueryHistoryExploit(ParamHandle, ResultHandle)
	self:DebugPrint("tbMiniEncounterHistory:QueryHistoryExploit() was invoked.");
	self.tbData = self.tbData or {};
	
	if self.tbData == nil or getn(self.tbData) <= 0 then
		self:LoadData();
	end

	ObjBuffer:PushObject(ResultHandle, self.tbData[2]);
end
